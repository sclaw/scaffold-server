create schema if not exists auth;
create table auth.user (
id bigserial primary key,
identifier text not null,
password bytea not null,
created timestamptz not null default now(),
modified timestamptz,
user_type text not null,
constraint "user_identifier_uniq" unique("identifier"));
create table auth.token (
id bigserial primary key,
user_fk int8 not null constraint "token_user_id_fk" references auth.user(id),
token bytea not null,
created timestamptz not null default now(),
uid text not null);
create table auth.role 
(id bigserial primary key, 
 title text not null,
 description text,
 parent_fk int8 null 
 constraint "role_id_fk" 
 references auth.role(id),
 created timestamptz not null default now(),
 modified timestamptz, 
 constraint "role_title_uniq" unique ("title"));
create table auth.permission 
(id bigserial primary key, 
 title text not null,
 description text,
 parent_fk int8 null 
 constraint "permission_id_fk" 
 references auth.permission(id),
 created timestamptz not null default now(),
 modified timestamptz,
 constraint "permission_title_uniq" unique ("title"));
create table auth.user_role 
(user_fk int8 not null constraint "user_role_user_id_fk" references auth.user(id),
 role_fk int8 not null constraint "user_role_role_id_fk" references auth.role(id));
create table auth.role_permission 
(role_fk int8 not null constraint "role_permission_role_id_fk" references auth.role(id),
 permission_fk int8 not null constraint "role_permission_permission_id_fk" references auth.permission(id));

insert into auth.role (title) values ('root');
insert into auth.role (title, parent_fk) values ('user', 1);
insert into auth.role (title, parent_fk) values ('provider', 1);
insert into auth.role (title, parent_fk) values ('guest', 3);

insert into auth.permission (title) values ('root');
insert into auth.permission (title, parent_fk) values ('user', 1);
insert into auth.permission (title, parent_fk) values ('provider_admin', 1);
insert into auth.permission (title, parent_fk) values ('provider_guest', 3);

insert into auth.role_permission (role_fk, permission_fk) values (2, 2);
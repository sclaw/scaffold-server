create schema if not exists search;
create table search.qualification (
  provider_branch_qualification_fk int8 not null
  constraint "search_qualification__provider_branch_qualification_id_fk" 
  references edgenode.provider_branch_qualification(id),
  piece text not null,
  origin text not null
);
create table search.provider (
  provider_branch_fk int8 not null
  constraint "search_qualification__provider_branch_id_fk" 
  references edgenode.provider_branch(id),
  piece text not null,
  origin text not null
);

create index search_qualification__trgm_idx ON search.qualification USING GIN (piece gin_trgm_ops);
create index search_provider__trgm_idx ON search.provider USING GIN (piece gin_trgm_ops);

create or replace function modify_search_qualification() returns trigger as
$$
begin
  delete from search.qualification;
  insert into search.qualification
  (provider_branch_qualification_fk, origin, piece)
  select id, title, unnest(tsvector_to_array(to_tsvector(title))) 
  from "edgenode"."provider_branch_qualification";
  return null;
end;
$$ 
language 'plpgsql';

create or replace function modify_search_provider() returns trigger as
$$
begin
  delete from search.provider;
  insert into search.provider
  (provider_branch_fk, origin, piece)
  select id, title, unnest(tsvector_to_array(to_tsvector(title))) 
  from "edgenode"."provider_branch";
  return null;
end;
$$ 
language 'plpgsql';

create trigger go_modify__search_qualification
after insert or update on edgenode.provider_branch_qualification 
for each row execute procedure modify_search_qualification();

create trigger go_modify__search_provider
after insert or update on edgenode.provider_branch 
for each row execute procedure modify_search_provider();